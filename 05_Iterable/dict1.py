#{key:value}를 사용해서 딕션너리 만들때는
#키가 문자열인 경우에는 반드시 ' 나 "로 키를 감싼다
import pprint


#dict(key=value)를(생성자) 사용해서 딕션너리 만들때는
#키가 문자열인 경우라도 ' 나 "로 키를 감싸면 안된다

def pprint(obj):
    print(f'value:{obj},type:{type(obj)},len:{len(obj)}')

print('[딕셔너리 생성 첫번째 : 빈 딕셔너리]')
a=dict()#혹은 {}
pprint(a)
print('[딕셔너리 생성 두번째 : {키:값,....}]')
#키 혹은 값이 문자열이면 반드시 ''나 ""로 감싸야 한다
a={'name':'가길동','age':20,'addr':'가산동',1:'1강의실'}
pprint(a)
#키값이 중복되는 경우 나중에 지정한 키값이 저장된다.
a={'name':'가길동','age':20,'addr':'가산동',1:'1강의실','age':30}
pprint(a)
print('[딕셔너리 생성 세번째 : {키:값,....}]')
#키는 리스트와 딕셔너리를 제외한 모든 자료형이 키가 될 수있다
a={1:'one',(2,):'two',False:0,3.14:['파이','PI']}
pprint(a)
#{['PI']:3.14}#TypeError: unhashable type: 'list'
print('[딕셔너리 생성 네번째 : dict(키=값,키1=값1,...)]')
#dict(키 = 값)함수 사용시 키는 '',""로 감싸면 에러
#또한 이때 int/float/bool타입은 키로 사용 불가
#dict(1='one')#SyntaxError
a=dict(name='가길동',age=20,addr='가산동')
pprint(a)
print('[딕셔너리 생성 다섯번째 : dict([[요소1,요소2],[요소1,요소2],..])]')
#리스트[]나 튜플()를 딕셔너리로 만들때는 dict([(),[],()...]) 혹은dict(([],(),[]...))
#단, 바깥 딕션너리의 안의 []나()의 요소수는 반드시 두 개여야한다(2 is required)
#왜냐하면 하나는 키가 되고 하나는 밸류가 되어야 하니까
#리스트를 딕션너리로 변환
a=dict([('name','가길동'),('age',20),('addr','부산'),('tel','010')])
#튜플을 딕션너리로 변환
a=dict((('name','가길동'),['age',20],('addr','부산'),['tel','010']))
pprint(a)
print('[딕셔너리 생성 여섯번째 : dict(zip())]')
#zip함수를 이용해서 dict만들때 zip함수의 인자는 반드시 반복가능한 객체가 2개가 와야 한다
#첫번째는 키가 되고 두번째는 밸류가 된다
#반복가능한 객체의 요소수가 동일하지 않으면, 적은 요소를 가진 객체를 기준으로
#딕션너리가 만들어진다
'''
zip([키1,키2,키3,...],[값1,값2,값3,...]):(키1,값1),(키2,값2),(키3,값3),..를 요소로 갖는 zip객체 반환
dict(zip((키1,키2,키3,...),(값1,값2,값3,...))):키값들을 키로 값들을 값으로 갖는 딕셔너리 생성
dict([[요소1,요소2],[요소1,요소2],[요소1,요소2],...]):요소1을 키로 요소2를 값으로 갖는 딕셔너리 생성
'''
d = dict(zip(('name','age','addr'),['다길동',30,'청담동']))
pprint(d)
d = dict(zip(('name',),['다길동',30,'청담동']))
pprint(d)
print('[딕셔너리 읽기 - 딕셔너리객체[키] 혹은 딕셔너리객체.get(키,[기본값])]')
f=dict(zip((3.14,1,False,'과목'),(['파이','PI'],'일','거짓','파이썬')))
print(f)
print(f[3.14])
print(f[1])
print(f[False])
print(f['과목'])
#print(f['파이'])#KeyError: '파이'
print(f.get('파이'))#None
print(f.get('파이',3.14))
print('[딕셔너리 값 할당하기 - 딕셔너리객체[키]=값]')
#딕셔너리는 리스트처럼 mutabble하다
f[3.14]='파이',
f[1]='하나'
f['코스모']='한소인'#없는 키는 키가 새롭게 추가됨
pprint(f)
